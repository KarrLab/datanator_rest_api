version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.8.2
  aws-ecs: circleci/aws-ecs@01.1.0


parameters:
  upstream_repo_name:
    type: string
    default: ""
  upstream_build_num:
    type: integer
    default: 0

workflows:
  API-Workflow:
    jobs:
      - Build
      - Unit Test:
          requires:
            - Build
      - Validation Test:
          requires:
            - Build
      - Implementation Test:
          requires:
            - Build
      - Backend Integration Test:
          requires:
            - Build
      - Frontend Integration Test:
          requires:
            - Build
      - aws-ecr/build-and-push-image:  # push image to ECR
          requires:
            - Unit Test
            - Validation Test
            - Implementation Test
            - Backend Integration Test
            - Frontend Integration Test
          repo: "${AWS_RESOURCE_NAME_PREFIX_TEST}"
          tag: "${CIRCLE_SHA1}"
      - aws-ecs/deploy-service-update: # update ECS
          requires:
            - aws-ecr/build-and-push-image 
          family: "${AWS_RESOURCE_NAME_PREFIX_TEST}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX_TEST}-cluster"
          force-new-deployment: true
          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX_TEST}-service,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX_TEST}:${CIRCLE_SHA1}"
  KarrLab:
    jobs:
      - karrlab

executors:
  karr_lab_build_env:
    docker:
      - image: karrlab/wc_env_dependencies:latest
    working_directory: /root/project
  setup_env:
    working_directory: /root/API/
    docker:
      - image: python:3.7
  api_test_env:
    working_directory: /root/API/
    docker:
      - image: python:3.7
  query_test_env:
    working_directory: /root/Query
    docker:
      - image: python:3.7

testJob: &testJob
  working_directory: /root/build
  docker:
    - image: python:3.7
  steps:
    - attach_workspace:
        at: /
    - checkout
    - run:
        name: Test Run
        command: echo "Test Run"
jobs:
  karrlab:
    executor: karr_lab_build_env
    steps:
      - checkout
      - restore_cache:
          keys:
            - v42-{{ arch }}-{{ .Branch }}-{{ checksum "/etc/docker-image-tag" }}-{{ checksum
              "requirements.txt" }}
      - run:
          name: Install pkg_utils (Python 3)
          command: python3 -m pip install -U git+https://github.com/KarrLab/pkg_utils.git#egg=pkg_utils
      - run:
          name: Install karr_lab_build_utils (Python 3)
          command: |
            python3 -m pip install -U git+https://github.com/KarrLab/sphinxcontrib-googleanalytics.git#egg=sphinxcontrib_googleanalytics
            python3 -m pip install -U git+https://github.com/KarrLab/wc_utils.git#egg=wc_utils[all]
            python3 -m pip install -U git+https://github.com/KarrLab/karr_lab_build_utils.git#egg=karr_lab_build_utils[all]
      - run:
          name: Install package configuration files including credentials
          command: karr_lab_build_utils3 download-install-package-config-files
      - run:
          name: Setup Python environment
          command: |
            if [[ -f .circleci/requirements.txt ]]; then
              while IFS="" read -r line || [ -n "$line" ]; do
                if [[ ! -z "$line" ]] && [[ ! "$line" =~ ^# ]]; then
                  python3 -m pip install -U "$line"
                fi
              done < .circleci/requirements.txt
            fi
      - run:
          name: Install datanator_query_python package  #testapi branch
          command: python3 -m pip install -U git+https://github.com/karrlab/datanator_query_python.git@testapi#egg=datanator_query_python
      - run:
          name: Install package (Python 3) (https://github.com/pypa/pip/issues/4537#issuecomment-373386803)
          command: |
            python3 setup.py install_egg_info 
            python3 -m pip install -U -e .[all]
      - save_cache:
          key:
            v42-{{ arch }}-{{ .Branch }}-{{ checksum "/etc/docker-image-tag" }}-{{
            checksum "requirements.txt" }}
          paths:
            - /usr/local/lib/python3.7/site-packages
      - run:
          name: Test code
          environment:
            PYTHONFAULTHANDLER: 1
          command: |
            set +e

            karr_lab_build_utils3 run-tests --with-xunit --with-coverage
            TEST_EXIT_CODE_PY3=$?

            # Calculate exit code and save to file for reading by the next step
            if [[ $TEST_EXIT_CODE_PY3 -eq 0 ]]; then
              echo "0" > TEST_EXIT_CODE
              exit 0
            else
              echo "0" > TEST_EXIT_CODE
              exit 1
            fi
      - run:
          name: Generate reports, archive results, and send notifications
          when: always
          environment:
            UPSTREAM_REPONAME: << pipeline.parameters.upstream_repo_name >>
            UPSTREAM_BUILD_NUM: << pipeline.parameters.upstream_build_num >>
          command: |
            if [[ -f TEST_EXIT_CODE ]]; then
              INSTALLATION_EXIT_CODE=0
              TEST_EXIT_CODE=$(<TEST_EXIT_CODE)
            else
              INSTALLATION_EXIT_CODE=1
              TEST_EXIT_CODE=1
            fi

            karr_lab_build_utils3 do-post-test-tasks $INSTALLATION_EXIT_CODE $TEST_EXIT_CODE
      - store_test_results:
          path: /root/project/tests/reports
      - store_artifacts:
          path: /root/project/tests/reports
          destination: reports
      - store_artifacts:
          path: /root/.wc/log
          destination: log
      - store_artifacts:
          path: /root/project/docs/_build/html
          destination: docs
  Build:
    executor: setup_env
    steps:
      #Get package
      - restore_cache:
          keys:
            - source-v2-{{ .Branch }}-{{ .Revision }}
            - source-v2-{{.Branch}}-
      - checkout
      - save_cache:
          key: source-v2-{{ .Branch }}-{{ .Revision }}
          paths:
            - .
      #Get main dependencies
      - restore_cache:
          key: dependencies-v2-{{ arch }}-{{ .Branch }}-{{ checksum "requirements.txt"}}
      - run:
          name: Install Package Dependencies
          command: python3 -m pip install -r requirements.txt
      - save_cache:
          key:
            dependencies-v2-{{ arch }}-{{ .Branch }}-{{ checksum "requirements.txt"
            }}
          paths:
            - /usr/local/lib/python3.7/site-packages
            - /usr/local/bin
      # Install circle specific dependencies
      - run:
          name: Install Test Packages
          command: |
            if [[ -f .circleci/requirements.txt ]]; then
              while IFS="" read -r line || [ -n "$line" ]; do
                if [[ ! -z "$line" ]] && [[ ! "$line" =~ ^# ]]; then
                  python3 -m pip install -U "$line"
                fi
              done < .circleci/requirements.txt
            fi
      - run:
          name: Install datanator_query_python package  #testapi branch
          command: python3 -m pip install -U git+https://github.com/karrlab/datanator_query_python.git@testapi#egg=datanator_query_python
      #Get build configs
      - add_ssh_keys:
          fingerprints:
            - "1d:0a:7e:fa:2a:76:13:84:8d:ff:0a:43:21:e4:10:d6"
      - run:
          name: Get Build config
          command: git clone git@github.com:KarrLab/karr_lab_build_config.git ../.wc

      - persist_to_workspace:
          root: /
          paths:
            - usr/local/lib/python3.7/site-packages
            - usr/local/bin
            - root/API/
            - root/.wc
  Unit Test:
    executor: setup_env
    steps:
      - attach_workspace:
          at: /
      - checkout
      - run:
          name: Create egg-info (https://github.com/pypa/pip/issues/4537#issuecomment-373386803)
          command: python3 setup.py install_egg_info
      - run:
          name: Install package (Python 3)
          command: python3 -m pip install -U -e .
      - run:
          name: Run Tests
          command: pytest
  Validation Test:
    <<: *testJob
  Implementation Test:
    <<: *testJob
  Backend Integration Test:
    <<: *testJob
  Frontend Integration Test:
    <<: *testJob
  Deploy:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: "Install Heroku CLI, if necessary"
          command: |
            if [[ $(command -v heroku) == "" ]]; then
              curl https://cli-assets.heroku.com/install.sh | sh
            else
              echo "Heroku is already installed. No operation was performed."
            fi
      - run:
          name: Deploy testapi to Heroku # testapi (stage)
          command: |
            git push --force https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME_STAGE.git testapi
