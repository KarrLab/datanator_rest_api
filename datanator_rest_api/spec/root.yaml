openapi: 3.0.1
info:
  title: Datanator API
  version: 1.0.0
  description: An API for interacting with the Datanator Integrated Database. The API can
    be used to get values for a variety of biological molecules and reactions,
    such as concentration, abundance, or kinetic parameters. The API complies
    with the openAPI 3 standard. Use the <a href="/apiDoc"> /apiDoc</a> path to
    access the api specification
  contact:
    name: Karr Lab
    email: info@karrlab.org
    url: https://datanator.info/
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/bilalshaikh42/Datanator/1.0.0
  - description: The public datanator server
    url: http://api.datanator.info
tags:
  - name: Datanator
    description: Requests related to the database itself
  - name: Metabolites
    description: Requests for information about metabolites, including conentrations
  - name: Proteins
    description: Requests for information about proteins, ezymes, and protein complexes
  - name: Reactions
    description: Requests for information on reactions, including kinetic paramters


    
paths:
  /ping:
    get:
     
      summary: Pings the server to verfy connection
      tags:
        - Datanator
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string

  /metabolites:
    get:
     
      summary: Get the list of metabolite objects
      tags:
        - Metabolites
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Metabolite"
    put:
      tags: 
        - Metabolites
      summary: Add a new metabolite
      description: Add a new metabolite
      responses:
        '200':
          description: OK


  /metabolites/{inchikey}:
    parameters:
        - in: path
          name: inchikey
          schema:
            type: string
          required: true
    get: 
     
      summary: Get metabolite by inchikey
      tags: 
        - Metabolites
      
      responses:
        "200":
          description: OK
          content: 
            application/json:
              schema:
                $ref:  "#/components/schemas/Metabolite"

    post:
      tags:
        - Metabolites
      summary: Update an existing metabolite
      description: Update an existing metabolite
      responses:
        '200':
          description: OK

components:
  schemas:
    Protein:
      $ref: ./schemas/protein.yaml
    Metabolite:
      $ref: ./schemas/metabolite.yaml
    Observation: 
      $ref: ./schemas/observation.yaml
    Reaction: 
      $ref: ./schemas/reaction.yaml
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  parameters:
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
        type: integer
        format: int32
  responses:
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GeneralError"
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.org/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
            